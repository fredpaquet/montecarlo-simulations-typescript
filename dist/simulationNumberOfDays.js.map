{"version":3,"sources":["../src/simulationNumberOfDays.ts"],"names":[],"mappings":"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","file":"simulationNumberOfDays.js","sourcesContent":["import {ForecastItems} from \"ForecastItems\";\r\nimport {Percentile} from \"Percentile\";\r\nimport {Simulation} from \"Simulation\";\r\nimport {SimulationResult} from \"SimulationResult\";\r\n\r\nexport class SimulationNumberOfDays extends Simulation{\r\n\r\n    private _numberOfDays: number;\r\n\r\n    constructor(numberOfDays: number, numberOfSimulations: number) {  \r\n        super(numberOfSimulations)\r\n        this._numberOfDays = numberOfDays;\r\n    }\r\n\r\n    execute(): void{\r\n\r\n\r\n        // Variables used in the inner for\r\n        var throughputResults: number[] = new Array(this._numberOfDays);\r\n        var randomIndex: number;\r\n        var simulatedNumberOfItemsCompleted: number;\r\n\r\n        // Produce X simulations\r\n        for (var i = 0; i < this.NumberOfSimulations; i++) {\r\n\r\n            // At each simulation, generate random througputs based on the historical values\r\n            for (var j = 0; j < this._numberOfDays; j++) {\r\n                randomIndex = this.RandomIndexGenerator;\r\n                throughputResults[j] = this.HistoricalThroughput[randomIndex];\r\n            }\r\n\r\n            simulatedNumberOfItemsCompleted = this.addItems(throughputResults);\r\n\r\n            this.addSimulationResult(simulatedNumberOfItemsCompleted, this._numberOfDays);\r\n        }\r\n    }\r\n\r\n    private addItems(throughputResults: number[]): number {\r\n        var total = 0;\r\n        for (var value of throughputResults)\r\n            total += value;\r\n        return total;\r\n    }\r\n\r\n    createForecast(): void {\r\n\r\n        var orderedDescResults = this.orderSimulationResults();\r\n        var orderedAscPercentiles = this.orderPercentiles();\r\n\r\n        var counter = 0;\r\n        var numberOfOccurences = 0;\r\n\r\n        for (var percentile of orderedAscPercentiles) {\r\n            counter = 0;\r\n            numberOfOccurences = Math.round(percentile.value * this.NumberOfSimulations);\r\n\r\n            for (var result of orderedDescResults) {\r\n                counter += result.Occurences;\r\n                if (counter >= numberOfOccurences) {\r\n                    this.Forecasts.push(new ForecastItems(percentile, result.NumberOfItemsCompleted, this._numberOfDays));\r\n                    break;\r\n                }                    \r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private orderSimulationResults(): Array<SimulationResult> {\r\n        var sortedArray: Array<SimulationResult> = this._simulationResults.sort((n1:SimulationResult, n2:SimulationResult) => {\r\n            if (n1.NumberOfItemsCompleted > n2.NumberOfItemsCompleted)\r\n                return -1;\r\n            else if (n1.NumberOfItemsCompleted < n2.NumberOfItemsCompleted)\r\n                return 1;\r\n            else\r\n                return 0;\r\n        });\r\n\r\n        return sortedArray;\r\n\r\n    }\r\n\r\n    private orderPercentiles(): Array<Percentile> {\r\n        var sortedArray: Array<Percentile> = this._percentiles.sort((n1:Percentile, n2:Percentile) => {\r\n            if (n1.value > n2.value)\r\n                return 1;\r\n            else if (n1.value < n2.value)\r\n                return -1;\r\n            else\r\n                return 0;\r\n        });\r\n\r\n        return sortedArray;\r\n    }\r\n}"]}