{"version":3,"sources":["../src/simulation.ts"],"names":[],"mappings":"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","file":"simulation.js","sourcesContent":["import {Forecast} from \"forecast\";\r\nimport {Percentile} from \"percentile\";\r\nimport {SimulationResult} from \"simulationResult\";\r\n\r\nexport abstract class Simulation {\r\n\r\n    private initial_number_of_simulations = 10000;\r\n    private initial_percentiles: Array<Percentile>;\r\n\r\n    //private ThroughputReader throughputReader;\r\n    //private SimulationResultsWriter resultsWriter;\r\n\r\n    public get NumberOfSimulations() :number {  \r\n        return this._numberOfSimulations; \r\n    }\r\n    public set NumberOfSimulations(number: number) {\r\n        this._numberOfSimulations = number;\r\n    }\r\n    private _numberOfSimulations: number;\r\n\r\n    public get HistoricalThroughput(): number[] {\r\n        return this._historicalThroughput;\r\n    }\r\n    public set HistoricalThroughput(throughputs: number[]) {\r\n        this._historicalThroughput = throughputs;\r\n    }\r\n    private _historicalThroughput: Array<number>;\r\n\r\n    public get Forecasts(): Forecast[] {\r\n        return this._forecasts;\r\n    }\r\n    public set Forecasts(forecasts: Forecast[]) {\r\n        this._forecasts = forecasts;\r\n    }\r\n    private _forecasts: Array<Forecast>;\r\n\r\n    public get RandomIndexGenerator(): number {\r\n        return Math.floor(Math.random() * this._historicalThroughput.length);\r\n    }\r\n\r\n    protected _simulationResults: Array<SimulationResult>;\r\n    protected _percentiles: Array<Percentile>;\r\n\r\n\r\n    constructor(numberOfSimulations : number) {\r\n        this.initial_percentiles = new Array<Percentile>(5);\r\n        this.initial_percentiles[0] = new Percentile(0.3);\r\n        this.initial_percentiles[1] = new Percentile(0.5);\r\n        this.initial_percentiles[2] = new Percentile(0.7);\r\n        this.initial_percentiles[3] = new Percentile(0.85);\r\n        this.initial_percentiles[4] = new Percentile(0.9);\r\n\r\n        this.NumberOfSimulations = numberOfSimulations;\r\n        this._simulationResults = new Array<SimulationResult>(numberOfSimulations);\r\n        this._percentiles = this.initial_percentiles;\r\n        this._forecasts = new Array<Forecast>(0);\r\n        this._historicalThroughput = [2, 7, 3, 9, 0, 3, 6, 8, 3];\r\n    }\r\n\r\n    abstract execute(): void;\r\n\r\n    abstract createForecast(): void;\r\n\r\n    addSimulationResult(numberOfItemsCompleted: Number, numberOfDays: Number): void {\r\n\r\n        var list = this._simulationResults.filter(result => result.NumberOfItemsCompleted == numberOfItemsCompleted);\r\n                         \r\n        if (list.length == 0) {\r\n            this._simulationResults.push(new SimulationResult(numberOfItemsCompleted, numberOfDays));\r\n        }\r\n        else if (list.length == 1) {\r\n            list[0].incrementOccurences();\r\n        }\r\n        else {\r\n            throw new RangeError(\"Ayoye\");\r\n        }\r\n    }\r\n\r\n    printSimulationResult(): void {\r\n        // some writer writes the forecasts and its simulation results\r\n    }\r\n}"]}